import os
import psutil
import yara
import time
import ctypes

# Function to compile YARA rules
def compile_yara_rules(rules_folder):
    compiled_rules = {}
    for filename in os.listdir(rules_folder):
        if filename.endswith('.yar') or filename.endswith('.yara'):
            rule_name = os.path.splitext(filename)[0]
            rule_path = os.path.join(rules_folder, filename)
            try:
                compiled_rules[rule_name] = yara.compile(rule_path)
            except yara.SyntaxError as e:
                print(f"Error compiling rule '{rule_name}': {e}")
    return compiled_rules

def show_alert(process_name, pid, rule_name):
    """
    Show an alert dialog box.
    """
    message = f"Process '{process_name}' (PID: {pid}) matched YARA rule '{rule_name}'"
    ctypes.windll.user32.MessageBoxW(0, message, "YARA Match Alert", 0x40 | 0x1)  

def get_process_info(process, compiled_rules):
    try:
        # Get process details
        process_name = process.name()
        process_parent = process.parent()
        process_children = process.children(recursive=True)
        process_cmdline = " ".join(process.cmdline())
        pid = process.pid

        # Concatenate process information into a single string
        process_info_str = f"{process_name}|{process_cmdline}|{process_parent.name() if process_parent else ''}|{'|'.join(child.name() for child in process_children)}"

        # Convert process information to bytes-like object
        process_info_bytes = process_info_str.encode()

        # Check against YARA rules
        for rule_name, rule in compiled_rules.items():
            try:
                matches = rule.match(data=process_info_bytes)
                if matches:
                    print(f"Process '{process_name}' (PID: {pid}) matched YARA rule '{rule_name}'")
                    show_alert(process_name, pid, rule_name)
            except yara.Error as e:
                print(f"Error matching process '{process_name}' with YARA rule '{rule_name}': {e}")

    except psutil.AccessDenied:
        print(f"Access denied to process '{process.name()}' (PID: {process.pid})")
    except (psutil.NoSuchProcess, psutil.ZombieProcess):
        pass 

def monitor_process_events(rules_folder):
    compiled_rules = compile_yara_rules(rules_folder)
    if not compiled_rules:
        return

    while True:
        # Monitor process events continuously
        for process in psutil.process_iter(['pid', 'name', 'username', 'cmdline']):
            try:
                get_process_info(process, compiled_rules)
            except psutil.AccessDenied:
                print(f"Access denied when trying to access process '{process.info['name']}' (PID: {process.info['pid']})")

        
        time.sleep(1)

# Start the monitoring
if __name__ == "__main__":
    rules_folder = 'path_to_the_Yara_rules_folder'
    monitor_process_events(rules_folder)
