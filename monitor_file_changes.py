import os
import threading
import time
import logging
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import yara
import ctypes

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

# Function to compile YARA rules
def compile_yara_rules(yara_rules_folder):
    compiled_rules = []
    for rule_file in os.listdir(yara_rules_folder):
        if rule_file.endswith(".yar") or rule_file.endswith(".yara"):
            rule_path = os.path.join(yara_rules_folder, rule_file)
            try:
                compiled_rule = yara.compile(filepath=rule_path)
                compiled_rules.append(compiled_rule)
            except yara.SyntaxError as e:
                logging.error(f"Error compiling rule '{rule_file}': {e}")
    return compiled_rules

# Function to show alert dialog box
def show_alert(message):
    ctypes.windll.user32.MessageBoxW(0, message, "Alert", 1)

# Function to monitor file changes
class FileChangeHandler(FileSystemEventHandler):
    def __init__(self, compiled_rules):
        self.compiled_rules = compiled_rules

    def on_modified(self, event):
        if event.is_directory:
            return
        self.check_yara_rules(event.src_path)

    def on_created(self, event):
        if event.is_directory:
            return
        self.check_yara_rules(event.src_path)

    def on_deleted(self, event):
        if event.is_directory:
            return
        self.check_yara_rules(event.src_path)

    def check_yara_rules(self, file_path):
        max_retries = 3
        for attempt in range(max_retries):
            try:
                for rule in self.compiled_rules:
                    matches = rule.match(filepath=file_path)
                    if matches:
                        for match in matches:
                            alert_message = f"Matched YARA rule '{match.rule}' for file: {file_path}"
                            logging.info(alert_message)
                            show_alert(alert_message)
                break 
            except yara.Error as e:
                logging.error(f"Error matching file '{file_path}' with YARA rule: {e}")
            except PermissionError:
                logging.warning(f"Permission denied: '{file_path}'")
            except FileNotFoundError:
                logging.warning(f"File not found: '{file_path}'")
            except Exception as e:
                logging.error(f"Unexpected error: {e}")
            time.sleep(1)  

def monitor_file_changes(path_to_monitor, yara_rules_folder):
    compiled_rules = compile_yara_rules(yara_rules_folder)
    event_handler = FileChangeHandler(compiled_rules)
    observer = Observer()
    observer.schedule(event_handler, path=path_to_monitor, recursive=True)

    logging.info(f"Monitoring file changes in {path_to_monitor}")
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()

    observer.join()

if __name__ == "__main__":
    # Set the file path to monitor
    file_path_to_monitor = r"C:\\"

    # Specify the folder containing YARA rules
    yara_rules_folder = 'path_to_the_Yara_rules_folder'

    # Start monitoring 
    file_thread = threading.Thread(target=monitor_file_changes, args=(file_path_to_monitor, yara_rules_folder))
    file_thread.start()

    try:
       
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("Stopping monitoring threads.")
        file_thread.join()
