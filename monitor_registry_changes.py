import time
import logging
import winreg
import ctypes
import os
import yara

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

# Windows API constants
HKEY_LOCAL_MACHINE = 0x80000002
KEY_NOTIFY = 0x0010
REG_NOTIFY_CHANGE_LAST_SET = 0x00000004

# Windows API functions
RegOpenKeyEx = ctypes.windll.advapi32.RegOpenKeyExW
RegOpenKeyEx.argtypes = [ctypes.c_uint, ctypes.c_wchar_p, ctypes.c_uint, ctypes.c_uint, ctypes.POINTER(ctypes.c_uint)]
RegOpenKeyEx.restype = ctypes.c_long

RegNotifyChangeKeyValue = ctypes.windll.advapi32.RegNotifyChangeKeyValue
RegNotifyChangeKeyValue.argtypes = [ctypes.c_uint, ctypes.c_int, ctypes.c_uint, ctypes.c_uint, ctypes.c_int, ctypes.POINTER(ctypes.c_uint), ctypes.c_uint, ctypes.c_uint]
RegNotifyChangeKeyValue.restype = ctypes.c_long

RegCloseKey = ctypes.windll.advapi32.RegCloseKey
RegCloseKey.argtypes = [ctypes.c_uint]
RegCloseKey.restype = ctypes.c_long

# Function to compile YARA rules
def compile_yara_rules(yara_rules_folder):
    compiled_rules = []
    for rule_file in os.listdir(yara_rules_folder):
        if rule_file.endswith(".yar" or ".yara" ):
            rule_path = os.path.join(yara_rules_folder, rule_file)
            with open(rule_path, 'r') as f:
                rule_text = f.read()
            compiled_rule = yara.compile(source=rule_text)
            compiled_rules.append(compiled_rule)
    return compiled_rules

# Alert mechanism using message box dialog
def alert_yara_match(rule_name, key_path):
    MessageBox = ctypes.windll.user32.MessageBoxW
    MessageBox(None, f"YARA rule matched: {rule_name}\nRegistry key: {key_path}", "YARA Rule Match", 0)

# Function to monitor registry changes
def monitor_registry_changes(keys_to_monitor, yara_rules_folder):
    compiled_rules = compile_yara_rules(yara_rules_folder)

    keys = []  
    key_handles = []  

    try:
        for path in keys_to_monitor:
            key_handle = ctypes.c_uint(0)  
            result = RegOpenKeyEx(HKEY_LOCAL_MACHINE, path, 0, KEY_NOTIFY, ctypes.byref(key_handle))
            if result == 0:  
                keys.append(path)
                key_handles.append(key_handle)
            else:
                logging.error(f"RegOpenKeyEx error: {result}")

        logging.info("Monitoring registry changes")

        while True:
            for i, key in enumerate(keys):
                result = RegNotifyChangeKeyValue(key_handles[i], False, REG_NOTIFY_CHANGE_LAST_SET, 0, False,None, 0, 0)
                if result == 0:  
                    logging.info(f"Registry key changed: {key}")
                    # Read registry key value
                    try:
                        value, _ = winreg.QueryValueEx(winreg.HKEY_LOCAL_MACHINE, key)
                        # Check registry value against YARA rules
                        for rule in compiled_rules:
                            matches = rule.match(data=value.encode())
                            if matches:
                                logging.info(f"Potential Rule Match Detected for key: {key}")
                                for match in matches:
                                    logging.info(f"Matched YARA rule: {match.rule}")
                                    alert_yara_match(match.rule, key)
                                break  
                    except Exception as e:
                        logging.error(f"Error reading registry key value: {e}")
                else:
                    logging.error(f"RegNotifyChangeKeyValue error: {result}")

            time.sleep(5)  
    except Exception as e:
        logging.error(f"Error: {e}")

    finally:
       
        for handle in key_handles:
            try:
                RegCloseKey(handle)
            except Exception as close_error:
                logging.error(f"Error closing registry key handle: {close_error}")


if __name__ == "__main__":
    # Specify the registry keys to monitor
    registry_keys_to_monitor = "path_to_monitor_the_registry"

    # Specify the folder containing YARA rules
    yara_rules_folder = 'path_to_the_Yara_rules_folder'

    # Start monitoring in the main thread
    try:
        monitor_registry_changes(registry_keys_to_monitor, yara_rules_folder)
    except KeyboardInterrupt:
        logging.info("Monitoring interrupted by user")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")

